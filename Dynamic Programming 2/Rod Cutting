class Solution {
    public int minCost(int n, int[] cuts) {
        Arrays.sort(cuts);
        int cutLen= cuts.length;
        
        // create new array and add 0 and length of rod at 0 and at last position
        int[] cut= new int[cutLen+2];
        
        cut[0]=0;
        for(int i=0;i<cutLen;i++){
            cut[i+1]=cuts[i];
        }
        
        cut[cutLen+1]=n;
       
        // dp of 1 more size because stated from 1 and end to 1 last elemnt of newly created array
        int[][] dp = new int[cutLen+1][cutLen+1];
        for(int[] dp1: dp){
            Arrays.fill(dp1,-1);
        }
        
        return helper(1,cutLen,cut,dp);
    }
    
    private int helper(int i, int j,int[] cuts,int[][] dp){
        
        if(i>j) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        int mini=Integer.MAX_VALUE;
        
        // at each element take the value and go to its left and right side
        for(int ind=i;ind<=j;ind++){
            int cost= cuts[j+1]-cuts[i-1]+helper(i,ind-1,cuts,dp)+helper(ind+1,j,cuts,dp);
            mini=Math.min(mini,cost);
        }
        
        return dp[i][j]=mini;
    }
}
