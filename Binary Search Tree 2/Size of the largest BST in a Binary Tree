class Solution {
    int ans;
    public int maxSumBST(TreeNode root) {
        dfs(root, false);
        
        return ans;
    }
    
    Node dfs(TreeNode root, boolean isLeft){
        if(root==null)
        {
            if(isLeft)
                return new Node(Integer.MIN_VALUE, Integer.MAX_VALUE, true, 0);
            return new Node(Integer.MIN_VALUE, Integer.MAX_VALUE, true, 0);
        }
        
        Node left = dfs(root.left, true);
        Node right = dfs(root.right, false);
        
        int sum = left.sum + right.sum + root.val;
        
        int min = Math.min(left.min == Integer.MIN_VALUE ? root.val : left.min, Math.min(right.min == Integer.MIN_VALUE ? root.val : right.min, root.val));
        int max = Math.max(left.max == Integer.MAX_VALUE ? root.val : left.max, Math.max(right.max == Integer.MAX_VALUE ? root.val : right.max, root.val));
      
        if(!left.isValid || !right.isValid || (left.max != Integer.MAX_VALUE && left.max >= root.val) || (right.min != Integer.MIN_VALUE && right.min <= root.val))
        {
            if(isLeft)
                return new Node(min, max, false,sum);
            return new Node(min, max, false, sum);
        }
        
        if(left.isValid && right.isValid && (left.max == Integer.MAX_VALUE || left.max < root.val) && (right.min == Integer.MIN_VALUE || right.min > root.val))
            ans = Math.max(ans, sum);
        
        if(isLeft)
            return new Node(min, max, true, sum);
        return new Node(min, max, true, sum);
    }
}

class Node{
    int min;
    int max;
    boolean isValid;
    
    int sum;
    
    Node(int min,int max, boolean isValid, int sum){
        this.min = min;
        this.max = max;
        this.isValid = isValid;
        this.sum = sum;
    }
}
