class Solution {
            int start = 0 , end = 0 ;
    Map<Integer, List<int[]>> map = new HashMap<>();
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        rec(0, root,0);
        List<List<Integer>> ans = new ArrayList<>();
        for(int i = start ; i<= end ; i++){
            if(map.containsKey(i)){
                List<int[]> list = map.get(i);
                Collections.sort(list, (a,b)-> a[1]== b[1] ? a[0]-b[0] : a[1]-b[1]);
                List<Integer> newList = new ArrayList<>();
                for(int[] x : list)
                    newList.add(x[0]);
                ans.add(newList);
            }
        }
        return ans ;
    }
    
    public void rec(int index, TreeNode node, int level){
        if(node == null)
            return ;
        start= Math.min(index, start);
        end = Math.max(index, end);
        if(map.containsKey(index))
            map.get(index).add(new int[]{node.val, level});
        else{
            List<int[]> list = new ArrayList<>();
            list.add(new int[]{node.val, level});
            map.put(index, list);
        }
        rec(index-1, node.left, level+1);
        rec(index+1, node.right, level+1);
    }
}

