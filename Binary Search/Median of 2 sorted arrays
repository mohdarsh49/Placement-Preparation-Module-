class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        boolean firstSmaller = nums1.length <= nums2.length;
        int[] A = firstSmaller? nums1 : nums2;
        int[] B = firstSmaller? nums2 : nums1;
        
        int total = A.length + B.length;
        
        int l = 0, r = A.length;
        while(l <= r){            
            int mid = (l+r)/2;
            int i = (A.length+B.length+1)/2 - mid;
            
            int leftA = mid > 0? A[mid-1] : Integer.MIN_VALUE;
            int rightA = mid < A.length? A[mid] : Integer.MAX_VALUE;
            int leftB = i > 0? B[i-1] : Integer.MIN_VALUE;
            int rightB = i < B.length? B[i] : Integer.MAX_VALUE;
            
            if(leftA <= rightB && leftB <= rightA){
                if(total % 2 == 1){
                    return Math.max(leftA, leftB)*1.0;
                } else {
                    return (Math.max(leftA, leftB) + Math.min(rightA, rightB)) / 2.0;
                }
            } else if (leftA > rightB){
                r = mid-1;
            } else {
                l = mid+1;
            }
        }
        return 0.0; // trivial return
    }
}
