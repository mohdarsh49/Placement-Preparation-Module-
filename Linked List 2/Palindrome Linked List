class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    public ListNode reverseList(ListNode head) {
        if(head == null){
            return head;
        }
        ListNode curr = head;
        ListNode prev = null; //prev node is the previos node of curr node 
                              //it's not the last null node of the lis
        while(curr!=null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev; // bec curr & next pointed to null and prev became the head
    }

    
    public boolean isPalindrome(ListNode head) {
        ListNode mid = middleNode(head);
        ListNode secondHead = reverseList(mid); // 2nd  head start from last
                                                // node of 1st list upto mid
        boolean palindrome = true;
        while(head != null && secondHead != null){
            if(head.val != secondHead.val){
                palindrome = false;
                break;
            }
            head = head.next;
            secondHead = secondHead.next;
        }
        return palindrome;
    }
}
