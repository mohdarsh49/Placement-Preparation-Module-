class Node {
    Node[] links;
    
    Node(){
        links = new Node[2];
    }
    
    boolean containsKey(int idx){
        return links[idx] != null;
    }
    
    Node get(int idx){
        return links[idx];
    }
    
    void put(int idx, Node node){
        links[idx] = node;
    }
}

class Trie{
    Node root;
    
    Trie(){
        root = new Node();
    }
    
    public void insert(int n){
        Node curr = root;
        for(int i = 31; i >= 0 ; i--){
            int bit = getBit(n, i);
            if(!curr.containsKey(bit)){
                curr.put(bit, new Node());
            }
            curr = curr.get(bit);
        }
    }
    
   public int getMax(int x){
        Node curr = root;
        int res = 0;
        for(int i = 31; i >= 0; i--){
            int bit = getBit(x, i);
            int reqBit = 1 - bit;
            if(curr.containsKey(reqBit)){
                res = res | (1 << i);
                curr = curr.get(reqBit);
            }else
                curr = curr.get(bit);
        }
        return res;
    }    
    
    private int getBit(int n, int i){
        return ((n >> i) & 1);
    }  
}

class Solution {
    Trie trie;
    
    Solution(){
        trie = new Trie();
    }
              
    public int findMaximumXOR(int[] nums) {
        int max = Integer.MIN_VALUE;
        
        for(int num : nums){
            trie.insert(num);
        }
        
        for(int num: nums){
            max = Math.max(max, trie.getMax(num));
        }
        return max;
    }       
}
