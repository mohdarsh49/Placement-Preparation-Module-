class Solution {
    class Node{
        Node links[] = new Node[2];
        Node(){
            
        }
        boolean containsKey(int n){
            return links[n] != null;
        }
        void put(int n , Node node){
            links[n] = node;
        }
        Node get(int n){
            return links[n];
        }
    }
    class Trie{
        Node root;
        Trie(){
            root = new Node();
        }
        void insert(int n){
            Node node = root;
            for(int i = 31; i >= 0; i--){
                int bit = (n & (1 << i)) == 0 ? 0 : 1;
                if(!node.containsKey(bit)){
                    node.put(bit , new Node());
                }
                node = node.get(bit);
            }
        }
        int getMax(int xi){
            Node node = root;
            int max = 0;
            for(int i = 31; i >= 0; i--){
                int reqBit = (xi & (1 << i)) == 0 ? 1 : 0;
                if(node.containsKey(reqBit)){
                    max |= (1 << i);
                    node = node.get(reqBit);
                }
                else{
                    node = node.get(1 - reqBit);
                }
            }
            return max;
        }
    }
    public int[] maximizeXor(int[] a, int[][] q) {
        Trie t = new Trie();
        int n = a.length;
        pair qp[] = new pair[q.length];
        for(int i = 0; i < q.length; i++){
            qp[i] = new pair(q[i][0] , q[i][1] , i);
        }
        Arrays.sort(qp);
        Arrays.sort(a);
        int idx = 0;
        int res[] = new int[q.length];
        for(int i = 0; i < q.length; i++){
            int xi = qp[i].x;
            int mi = qp[i].m;
            int qi = qp[i].qi;
            while(idx < n && a[idx] <= mi){
                t.insert(a[idx]);
                idx++;
            }
            if(idx == 0){
                res[qi] = -1;
                continue;
            }
            res[qi] = t.getMax(xi);
        }
        return res;
    }
    class pair implements Comparable<pair>{
        int x;
        int m;
        int qi;
        pair(int x , int m , int qi){
            this.x = x;
            this.m = m;
            this.qi = qi;
        }
        public int compareTo(pair o){
            return this.m - o.m;
        }
    }
}
