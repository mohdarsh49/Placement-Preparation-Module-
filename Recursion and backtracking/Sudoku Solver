class Solution {
    
    public boolean valid(char[][] board  , char c , int row , int col){

        for(int i=0 ;i<9 ;i++) {
            if (board[i][col] == c) return false;                  //col check
            if (board[row][i] == c) return false;                  //row check
            if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false;     //3X3 submatrix check
        }
        return true;

    }
    
    public boolean solve(char[][] board){

        for(int i=0 ;i<board.length ;i++){
            for(int j=0 ;j<board[0].length ;j++){

                if(board[i][j]=='.'){
                    
                    for(char c = '1' ;c<='9' ;c++){

                        if(valid(board , c,   i ,  j)){
                            board[i][j] = c;
                            
                            if (solve(board)) { 
                                return true;
                            } else {
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false;           //no 1-9 value was valid for the position so return false

                }
            }
        }

        return true;       //No emmpty space meaning sydoku if fully filled and solved

    }
    
    

    
    public void solveSudoku(char[][] board) {
        solve(board);
    }
}
