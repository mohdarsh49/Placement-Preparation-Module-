class LRUCache {
    class Node{
        int key;
        int value;
        Node prev, next;
        Node(int _key, int _value){
            key = _key;
            value = _value;
        }
    }
    //create a head node and a tail node
    Node head = new Node(0, 0);
    Node tail = new Node(0, 0);
    
    //Make a map to store the cache
    Map<Integer, Node> map = new HashMap();
    int capacity;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        //initialy head is connected to tail and tail is connected to head
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        //if map contains the key than return its value
        if(map.containsKey(key)){
            //bring the node
            Node node = map.get(key);
            //remove the node where it present in the list
            remove(node);
            //now move the node to the first of the list 
            //because now it become recently used
            insert(node);
            return node.value;
        }else{
            return -1;//if not contains the key than return -1
        }
    }
    
    public void put(int key, int value) {
        //if the key is already present in the map remove it and add it with new address
        if(map.containsKey(key)){
            remove(map.get(key));
        }
        //if the size is equal to the capacity than remove form the tail
        if(map.size() == capacity){
            remove(tail.prev);
        }
        //insert the new Node with key and value to the list
        insert(new Node(key, value));
    
    }
    private void remove(Node node){
        //first remove it from the cache map
        map.remove(node.key);
        //break the next link
        node.prev.next = node.next;
        //break the previous link
        node.next.prev = node.prev;
    }
    private void insert(Node node){
        //first add it to the cache map
        map.put(node.key, node);
        //make a pointer point to just next element of head
        //headNEP = headNextElementPointer
        Node headNEP = head.next;
        head.next = node;
        node.prev = head;
        headNEP.prev = node;
        node.next = headNEP;
    }
    
}
